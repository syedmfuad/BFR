



rm(list=ls()) 

library(dplyr)
library(stringr)
library(tidyr) 
library(haven) 
library(tidyUSDA) 
library(sf) 
library(units) 

setwd("C:/Users/syedm/Desktop/BFR Spatial") 

# PRECIPITATION 

data <- read.csv("PRCP_2022.csv") 

ncei_to_fips <- data.frame(
  ncei_state = sprintf("%02d", 1:48),  # NCEI codes from 1 to 48
  state = c(
    "AL", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA", "ID", "IL", "IN",
    "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT",
    "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA",
    "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY"
  )
)

# FIPS codes for the states
fips_codes <- c(
  "01", "04", "05", "06", "08", "09", "10", "12", "13", "16", "17", "18",
  "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30",
  "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42",
  "44", "45", "46", "47", "48", "49", "50", "51", "53", "54", "55", "56"
)

# Add the FIPS codes to the lookup table
ncei_to_fips$fips_state <- fips_codes


data <- data %>%
  mutate(
    NCEI = as.character(NCEI),  # Convert NCEI to character to work with string operations
    fips_county = str_sub(NCEI, -3),  # Extract the last three digits
    ncei_state = str_pad(str_sub(NCEI, 1, -4), width = 2, pad = "0")  # Extract the NCEI state code and pad with leading zero
  ) %>%
  left_join(ncei_to_fips, by = c("ncei_state" = "ncei_state")) %>%  # Join with the lookup table
  select(NCEI, fips_state, fips_county, state, everything(), -ncei_state)  # Reorder columns and remove ncei_state

# View the resulting dataframe
head(data)


data_avg_precip <- data %>%
  # Merge fips_state and fips_county into a new column called fips
  mutate(fips = paste0(fips_state, fips_county)) %>%
  
  # Replace -999.99 with NA in the Day columns
  mutate(across(starts_with("Day"), ~ na_if(., -999.99))) %>%
  
  # Pivot longer to transform day columns into rows and calculate annual sum of precipitation
  pivot_longer(cols = starts_with("Day"), names_to = "Day", values_to = "Precipitation") %>%
  
  # Calculate the annual sum of precipitation for every county
  group_by(fips) %>%
  summarise(annual_precipitation = sum(Precipitation, na.rm = TRUE), .groups = 'drop') 

data_avg_precip$annual_precipitation <- data_avg_precip$annual_precipitation*0.10

# View the resulting dataframe with annual precipitation
mean(data_avg_precip$annual_precipitation)*0.393701 





# TEMPERATURE 

data <- read.csv("TAVG_2022.csv") 

ncei_to_fips <- data.frame(
  ncei_state = sprintf("%02d", 1:48),  # NCEI codes from 1 to 48
  state = c(
    "AL", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA", "ID", "IL", "IN",
    "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT",
    "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA",
    "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY"
  )
)

# FIPS codes for the states
fips_codes <- c(
  "01", "04", "05", "06", "08", "09", "10", "12", "13", "16", "17", "18",
  "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30",
  "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42",
  "44", "45", "46", "47", "48", "49", "50", "51", "53", "54", "55", "56"
)

# Add the FIPS codes to the lookup table
ncei_to_fips$fips_state <- fips_codes


data <- data %>%
  mutate(
    NCEI = as.character(NCEI),  # Convert NCEI to character to work with string operations
    fips_county = str_sub(NCEI, -3),  # Extract the last three digits
    ncei_state = str_pad(str_sub(NCEI, 1, -4), width = 2, pad = "0")  # Extract the NCEI state code and pad with leading zero
  ) %>%
  left_join(ncei_to_fips, by = c("ncei_state" = "ncei_state")) %>%  # Join with the lookup table
  select(NCEI, fips_state, fips_county, state, everything(), -ncei_state)  # Reorder columns and remove ncei_state

# View the resulting dataframe
head(data)


data_avg_temp <- data %>%
  # Merge fips_state and fips_county into a new column called fips
  mutate(fips = paste0(fips_state, fips_county)) %>%
  
  # Replace -999.99 with NA in the Day columns
  mutate(across(starts_with("Day"), ~ na_if(., -999.99))) %>%
  
  # Pivot longer to transform day columns into rows and calculate annual sum of precipitation
  pivot_longer(cols = starts_with("Day"), names_to = "Day", values_to = "Temperature") %>%
  
  # Calculate the annual sum of precipitation for every county
  group_by(fips) %>%
  summarise(annual_temp = mean(Temperature, na.rm = TRUE), .groups = 'drop') 

mean(data_avg_temp$annual_temp, na.rm=TRUE) 



# UNEMPLOYMENT 

unemp <- read.csv("Unemployment.csv") 

# Assuming your dataset is named unemp
unemp <- unemp %>%
  # Ensure State_FIPS and County_FIPS are character strings
  mutate(State_FIPS = as.character(State_FIPS),
         County_FIPS = as.character(County_FIPS)) %>%
  
  # Pad State_FIPS to 2 digits
  mutate(State_FIPS = str_pad(State_FIPS, width = 2, side = "left", pad = "0")) %>%
  
  # Pad County_FIPS to 3 digits
  mutate(County_FIPS = str_pad(County_FIPS, width = 3, side = "left", pad = "0")) %>%
  
  # Create the new fips column by concatenating State_FIPS and County_FIPS
  mutate(fips = paste0(State_FIPS, County_FIPS)) %>%
  
  # Select only the fips and Unemp_rate columns
  select(fips, Unemp_rate) 


unemp <- unemp %>%
  drop_na() 


# INCIDENTS 

incident <- read.csv("Incidents.csv") 

# Assuming your dataset is named disaster
incident <- incident %>%
  mutate(County = str_replace(County, " County$", ""))

incident <- incident %>%
  mutate(Location = paste(County, State, sep = ", ")) 

incident <- incident %>%
  group_by(Location) %>%
  summarize(count = n())



# BFR LOAD 



(
  PROD_BFR <- 
    getQuickstat(
      #--- put your API key in place of key_get() ---#
      key = "4C0D7DCA-D6F6-30F7-84A2-757322710936", 
      program = "CENSUS", 
      sector = "ECONOMICS", 
      #group = "FARMS & LAND & ASSETS", 
      commodity = "AG LAND", 
      category = "AREA", 
      data_item = "AG LAND, CROPLAND - ACRES", 
      geographic_level = "COUNTY", 
      year = "2022", 
      geometry = TRUE
    )  %>% 
    #--- keep only some of the variables ---#
    dplyr::select(
      year, county_name, county_code, state_name, 
      state_fips_code, short_desc, Value
    ) 
) 


# Calculate the area in square kilometers and create a new column called Area
PROD_BFR <- PROD_BFR %>%
  mutate(Area = st_area(geometry)) %>%
  mutate(Area = set_units(Area, mi^2)) %>%
  mutate(Area = as.numeric(Area))  # Convert the units object to numeric 


# Assuming your dataset is named PROD_BFR and it's already loaded
PROD_BFR <- PROD_BFR %>%
  # Ensure state_fips_code and county_code are character strings
  mutate(state_fips_code = as.character(state_fips_code),
         county_code = as.character(county_code)) %>%
  
  # Pad state_fips_code to 2 digits and county_code to 3 digits
  mutate(state_fips_code = str_pad(state_fips_code, width = 2, side = "left", pad = "0"),
         county_code = str_pad(county_code, width = 3, side = "left", pad = "0")) %>%
  
  # Create the new fips column by concatenating state_fips_code and county_code
  mutate(fips = paste0(state_fips_code, county_code)) %>% 
  
  # Merge county_name and state_name into Location
  mutate(Location = paste(county_name, state_name, sep = ", ")) %>%
  # Convert Location to proper case
  mutate(Location = str_to_title(Location)) 


PROD_BFR <- PROD_BFR %>%
  filter(!is.na(Value)) 


# BANK 



bank <- read.csv("locations.csv") 

bank <- bank %>% 
  # Extract the last four digits of the ESTYMD column and convert to numeric
  mutate(year = as.numeric(substr(ESTYMD, nchar(ESTYMD) - 3, nchar(ESTYMD)))) %>%
  
  # Subset the data to include only rows where the year is less than 2022
  filter(year < 2022) %>%
  
  # Add a leading zero to the STCNTY column if it has 4 digits
  mutate(STCNTY = ifelse(nchar(STCNTY) == 4, paste0("0", STCNTY), STCNTY))

# Group by the STCNTY column and count the number of rows for each group
bank <- bank %>%
  group_by(STCNTY) %>%
  summarise(count = n()) 

# Rename the "STCNTY" column to "fips" in the bank dataset 
bank <- bank %>%
  rename(fips = STCNTY) 


# FIRST MERGE INCIDENT AND THEN MERGE BANK 


incident_data <- merge(PROD_BFR, incident, by = "Location", all.x=TRUE) 

incident_data <- incident_data %>%
  # Rename the count column to incidence
  rename(incidence = count) %>%
  # Mutate incidence column: replace values > 0 with 1, and NA with 0
  mutate(incidence = ifelse(is.na(incidence), 0, ifelse(incidence > 0, 1, incidence))) 




# Merge the bank dataset with the PROD_BFR dataset by the "fips" variable 

incident_bank_data <- merge(incident_data, bank, by = "fips", all.x=TRUE) 

# Assuming your dataframe is named data
incident_bank_data <- incident_bank_data %>%
  # Rename the count column to incidence
  rename(bank = count) %>%
  # Mutate incidence column: replace values > 0 with 1, and NA with 0
  mutate(bank = ifelse(is.na(bank), 0, bank)) %>% 
  
  rename(fips_state = state_fips_code) 

incident_bank_data <- incident_bank_data %>%
  mutate(density = bank / Area) 


# Remove rows where column1 equals a certain value (e.g., 0) 
incident_bank_data <- incident_bank_data %>%
  filter(fips != "02010") 


# STATE AG GDP 

state_gdp <- read.csv("STATE_GDP_2017-22.csv") 

state_gdp <- state_gdp %>%
  # Extract the first two digits from GeoFIPS
  mutate(fips_state = substr(GeoFIPS, 3, 4)) %>%
  
  # Filter for the specified Description values
  filter(Description %in% c("All industry total ", "  Agriculture, forestry, fishing and hunting ")) %>%
  
  # Select the relevant columns
  select(fips_state, Description, X2022) 

# Assuming your dataset is named state_gdp
state_gdp <- state_gdp %>%
  # Pivot to wide format to get each description as a separate column
  pivot_wider(names_from = Description, values_from = X2022) %>%
  
  # Convert columns 2 and 3 to numeric
  mutate(across(c(2, 3), as.numeric)) %>%
  
  # Calculate the ratio of column 3 to column 2
  mutate(ag_to_gdp = .[[3]]*100 / .[[2]]) 



# MERGE STATE GDP WITH BANK AND INCIDENT 


incident_bank_stategdp_data <- merge(incident_bank_data, state_gdp, by = "fips_state", all.x=TRUE) 


incident_bank_stategdp_data <- incident_bank_stategdp_data %>%
  # Select the desired columns
  select(fips_state, fips, Location, year, county_code, incidence, density, ag_to_gdp) %>%
  # Reorder the columns
  select(fips, fips_state, county_code, Location, incidence, density, ag_to_gdp)



incident_bank_stategdp_data <- incident_bank_stategdp_data %>%
  # Select and rename the columns
  select(fips, fips_state, county_code, Location, incidence, density, ag_to_gdp) %>%
  rename(
    fips_county = county_code,
    bank_density = density,
    location = Location
  ) %>%
  # Drop the geometry column
  st_drop_geometry()



# Perform the left joins
final_data <- unemp %>%
  left_join(data_avg_precip, by = "fips") %>%
  left_join(data_avg_temp, by = "fips") %>%
  left_join(incident_bank_stategdp_data, by = "fips")



# Rename the columns
final_data <- final_data %>%
  rename(
    unemp_rate = Unemp_rate,
    annual_precip = annual_precipitation
  )

# Move unemp_rate, annual_precip, and annual_temp to the end
final_data <- final_data %>%
  select(-unemp_rate, -annual_precip, -annual_temp, unemp_rate, annual_precip, annual_temp)

# View the resulting dataframe
head(final_data)



# Remove rows where all three specified columns are NA 
final_data <- final_data %>%
  filter(!if_all(c(incidence, bank_density, ag_to_gdp), is.na)) 



# NONFARM PROPREITOR 


nonfarm_prop <- read.csv("Nonfarm prop.csv") 


# Step 1: Add leading zero to GeoFips if it is 4 digits
nonfarm_prop <- nonfarm_prop %>%
  mutate(GeoFips = ifelse(nchar(as.character(GeoFips)) == 4, paste0("0", GeoFips), as.character(GeoFips)))

# Step 2: Reshape the data from long to wide format
# First, create a unique identifier for each group of three rows
nonfarm_prop <- nonfarm_prop %>%
  group_by(GeoFips) %>%
  mutate(row_id = row_number()) %>%
  ungroup()

# Spread the data
wide_data <- nonfarm_prop %>%
  pivot_wider(names_from = row_id, values_from = Value, names_prefix = "Value_")

# Step 3: Ensure the values are numeric
wide_data <- wide_data %>%
  mutate(across(starts_with("Value_"), as.numeric))

# Filter out rows with Description "Employment by place of work"
nonfarm_prop <- wide_data %>%
  filter(Description != "Employment by place of work") 

nonfarm_prop$Value_1 <- NULL 

nonfarm_prop <- nonfarm_prop %>%
  mutate(Value_3 = lead(Value_3)) 

nonfarm_prop <- nonfarm_prop %>%
  filter(Description != "    Nonfarm proprietors employment 2") 

nonfarm_prop <- nonfarm_prop %>%
  rename(fips = GeoFips) 



# OVER 20 POPULATION AND MERGE 



age_pop <- read.csv("agepop_2021.csv") 

age_pop <- age_pop %>%
  # Ensure state_fips_code and county_code are character strings
  mutate(fips_state = as.character(STATE),
         fips_county = as.character(COUNTY)) %>%
  
  # Pad state_fips_code to 2 digits and county_code to 3 digits
  mutate(fips_state = str_pad(fips_state, width = 2, side = "left", pad = "0"),
         fips_county = str_pad(fips_county, width = 3, side = "left", pad = "0")) %>%
  
  # Create the new fips column by concatenating state_fips_code and county_code
  mutate(fips = paste0(fips_state, fips_county)) 


# AGE6569_TOT, AGE7074_TOT, AGE7579_TOT, AGE8084_TOT, AGE85PLUS_TOT

age_pop <- age_pop %>%
  filter(YEAR == 3) %>%
  mutate(pop20_65 = rowSums(select(., AGE2024_TOT, AGE2529_TOT, AGE3034_TOT, AGE3539_TOT, AGE4044_TOT,
                                      AGE4549_TOT, AGE5054_TOT, AGE5559_TOT, AGE6064_TOT, AGE6569_TOT, 
                                      AGE7074_TOT, AGE7579_TOT, AGE8084_TOT, AGE85PLUS_TOT), na.rm = TRUE)) %>% 
  select(fips, pop20_65) 


nonfarm_prop <- merge(nonfarm_prop, age_pop, by="fips", all.x=TRUE) 


nonfarm_prop <- nonfarm_prop %>%
  mutate(nonfarm_prop = Value_3/pop20_65) %>% 
  rename(nonfarm_pop = Value_3) 



# Step 3: Remove all columns except fips and nonfarm_prop
nonfarm_prop <- nonfarm_prop %>%
  select(fips, nonfarm_pop, nonfarm_prop) 


# Remove rows with any NA values using na.omit 
nonfarm_prop <- na.omit(nonfarm_prop) 




# FARM PRICES 



# Create a dataframe with state FIPS codes and state names
farmprice_data <- data.frame(
  fips_state = c("01", "02", "04", "05", "06", 
                 "08", "09", "10", "11", "12", 
                 "13", "15", "16", "17", "18", 
                 "19", "20", "21", "22", "23", 
                 "24", "25", "26", "27", "28", 
                 "29", "30", "31", "32", "33", 
                 "34", "35", "36", "37", "38", 
                 "39", "40", "41", "42", "44", 
                 "45", "46", "47", "48", "49", 
                 "50", "51", "53", "54", "55", 
                 "56"),
  state_name = c("Alabama", "Alaska", "Arizona", "Arkansas", "California", 
                 "Colorado", "Connecticut", "Delaware", "District of Columbia", "Florida", 
                 "Georgia", "Hawaii", "Idaho", "Illinois", "Indiana", 
                 "Iowa", "Kansas", "Kentucky", "Louisiana", "Maine", 
                 "Maryland", "Massachusetts", "Michigan", "Minnesota", "Mississippi", 
                 "Missouri", "Montana", "Nebraska", "Nevada", "New Hampshire", 
                 "New Jersey", "New Mexico", "New York", "North Carolina", "North Dakota", 
                 "Ohio", "Oklahoma", "Oregon", "Pennsylvania", "Rhode Island", 
                 "South Carolina", "South Dakota", "Tennessee", "Texas", "Utah", 
                 "Vermont", "Virginia", "Washington", "West Virginia", "Wisconsin", 
                 "Wyoming"), 
  farm_price = c(3400, NA, 4200, 3550, 12000, 
                 1770, 13700, 9800, NA, 
                 6600, 3960, NA, 3700, 8900, 8000, 
                 9400, 2630, 4350, 3410, 2860, 9700, 
                 15200, 5850, 6150, 3000, 
                 4150, 1030, 3750, 1060, 5350, 
                 15400, 610, 3450, 5150, 
                 2050, 7200, 2250, 3040, 7350, 
                 17500, 3800, 2600, 4700, 
                 2650, 2810, 4200, 5100, 3100, 
                 3000, 5700, 850)
) 


farmprice_data$state_name <- NULL 

final_data <- merge(final_data, nonfarm_prop, by="fips", all.x=TRUE) 

final_data <- merge(final_data, farmprice_data, by = "fips_state", all.x=TRUE) 



# METRO 

metro <- read.csv("MSA.csv") 

metro <- metro %>%
  # Ensure state_fips_code and county_code are character strings
  mutate(fips_state = as.character(FIPS.State.Code),
         fips_county = as.character(FIPS.County.Code)) %>%
  
  # Pad state_fips_code to 2 digits and county_code to 3 digits
  mutate(fips_state = str_pad(fips_state, width = 2, side = "left", pad = "0"),
         fips_county = str_pad(fips_county, width = 3, side = "left", pad = "0")) %>%
  
  # Create the new fips column by concatenating state_fips_code and county_code
  mutate(fips = paste0(fips_state, fips_county)) 

metro <- metro %>%
  mutate(metro = ifelse(Metropolitan.Micropolitan.Statistical.Area == "Metropolitan Statistical Area", 1, 0)) %>%
  select(fips, metro) 




# GOVT PAYMENTS AND SALES FROM REIS 



reis_govtpayment_sales <- read.csv("REIS GovtPayment Sales.csv")  

# Transform the dataset from long to wide format
reis_govtpayment_sales <- reis_govtpayment_sales %>%
  
  mutate(fips = if_else(str_length(GeoFips) == 4, str_pad(GeoFips, width = 5, side = "left", pad = "0"), as.character(GeoFips))) %>%
  
  pivot_wider(
    names_from = Description,
    values_from = X2022
  ) %>%
  mutate(animalsales_total_county = (`  Cash receipts: Livestock and products`), 
         cropsales_total_county = lead(`  Cash receipts: Crops`), 
         govtpay_total_county = lead(`  Government payments`, 2)) %>% 
  select(-GeoFips, -GeoName, -LineCode, -`  Cash receipts: Livestock and products`, 
         -`  Cash receipts: Crops`, -`  Government payments`) %>%
  filter(!(if_all(c(animalsales_total_county, cropsales_total_county, govtpay_total_county), is.na))) 




# NONFARM INCOME 


nonfarm_income <- read.csv("NonfarmIncome.csv") 

# Step 1: Add leading zero to GeoFips if it is 4 digits
nonfarm_income <- nonfarm_income %>%
  mutate(GeoFips = ifelse(nchar(as.character(GeoFips)) == 4, paste0("0", GeoFips), as.character(GeoFips))) %>% 
  rename(fips = GeoFips, nonfarm_income = X2022) %>% 
  select(fips, nonfarm_income) 



# MERGE 

 
final_data <- merge(final_data, metro, by = "fips", all.x=TRUE) 

final_data <- merge(final_data, nonfarm_income, by="fips", all.x=TRUE) 


# Assuming your dataset is called metro
final_data <- final_data %>%
  mutate(metro = replace_na(metro, 0)) 


final_data <- na.omit(final_data) 



# COMPARE WITH OLD DATA 



# Read the data 
BFR <- read_dta("BFR.dta") 

BFR$bankbranch <- BFR$bankpersqmile*BFR$landsqmile 

BFR_1997 <- BFR %>% filter(Year == 1997) 
BFR_2002 <- BFR %>% filter(Year == 2002) 
BFR_2007 <- BFR %>% filter(Year == 2007) 
BFR_2012 <- BFR %>% filter(Year == 2012) 
BFR_2017 <- BFR %>% filter(Year == 2017) 




# Function to calculate mean and sd for specified columns 
compute_stats <- function(data, vars) {
  data %>%
    summarise(across(all_of(vars), list(mean = mean, sd = sd), na.rm = TRUE))
} 

# Variables of interest for BFR datasets
bfr_vars <- c("landprice", "bankpersqmile", "AgGDPratio", "Unemploymentrate", "pNonfarmProp", "metro", "pddv") 

# Variables of interest for final_data
final_vars <- c("farm_price", "bank_density", "ag_to_gdp", "unemp_rate", "nonfarm_prop", "metro", "incidence")

# Compute stats for each BFR dataset
bfr_1997_stats <- compute_stats(BFR_1997, bfr_vars) %>% mutate(Year = "1997")
bfr_2002_stats <- compute_stats(BFR_2002, bfr_vars) %>% mutate(Year = "2002")
bfr_2007_stats <- compute_stats(BFR_2007, bfr_vars) %>% mutate(Year = "2007")
bfr_2012_stats <- compute_stats(BFR_2012, bfr_vars) %>% mutate(Year = "2012")
bfr_2017_stats <- compute_stats(BFR_2017, bfr_vars) %>% mutate(Year = "2017")

# Combine BFR stats into a single dataframe
bfr_stats <- bind_rows(bfr_1997_stats, bfr_2002_stats, bfr_2007_stats, bfr_2012_stats, bfr_2017_stats)

# Compute stats for final_data
final_data_stats <- compute_stats(final_data, final_vars) %>% mutate(Year = 2022)

# Rename columns
rename_cols <- function(df, var_names) {
  new_colnames <- c(paste0(var_names, "_mean"), paste0(var_names, "_sd"), "Year")
  colnames(df) <- new_colnames
  return(df)
}

# Rename columns for BFR stats and final data stats
bfr_stats <- rename_cols(bfr_stats, c("farmprice", "banksqmile", "aggdp", "unemp", "nonfarm", "metro", "incidence"))
final_data_stats <- rename_cols(final_data_stats, c("farmprice", "banksqmile", "aggdp", "unemp", "nonfarm", "metro", "incidence")) 

bfr_stats$Year <- as.numeric(bfr_stats$Year)

# Combine all stats into a single dataframe
all_stats <- bind_rows(bfr_stats, final_data_stats)

# View the resulting dataframe
print(all_stats)





# QUICKSTATE DATA UPDATE 


# PRODUCERS, YEARS ON PRESENT OPERATION, 5 TO 9 YEARS - NUMBER OF PRODUCERS 


(
  QS_BFR_5_9 <- 
    getQuickstat(
      #--- put your API key in place of key_get() ---#
      key = "4C0D7DCA-D6F6-30F7-84A2-757322710936",
      program = "CENSUS",
      sector = "DEMOGRAPHICS",
      group = "PRODUCERS", 
      commodity = "PRODUCERS", 
      category = "PRODUCERS", 
      data_item = "PRODUCERS, YEARS ON PRESENT OPERATION, 5 TO 9 YEARS - NUMBER OF PRODUCERS", 
      geographic_level = "COUNTY",
      year = "2022"
    ) %>% 
    # Create the new fips column by concatenating state_fips_code and county_code
    mutate(fips = paste0(state_fips_code, county_code)) %>% 
    
    rename(bfr_5_9 = Value) %>% 
    
    dplyr::select(
      fips, bfr_5_9
    ) 
) 




# PRODUCERS, YEARS ON PRESENT OPERATION, 3 TO 4 YEARS - NUMBER OF PRODUCERS 


(
  QS_BFR_3_4 <- 
    getQuickstat(
      #--- put your API key in place of key_get() ---#
      key = "4C0D7DCA-D6F6-30F7-84A2-757322710936",
      program = "CENSUS",
      sector = "DEMOGRAPHICS",
      group = "PRODUCERS", 
      commodity = "PRODUCERS", 
      category = "PRODUCERS", 
      data_item = "PRODUCERS, YEARS ON PRESENT OPERATION, 3 TO 4 YEARS - NUMBER OF PRODUCERS", 
      geographic_level = "COUNTY",
      year = "2022" 
    )  %>% 
    # Create the new fips column by concatenating state_fips_code and county_code
    mutate(fips = paste0(state_fips_code, county_code)) %>% 
    
    rename(bfr_3_4 = Value) %>% 
    
    dplyr::select(
      fips, bfr_3_4
    )
) 



# PRODUCERS, YEARS ON PRESENT OPERATION, LT 3 YEARS - NUMBER OF PRODUCERS 


(
  QS_BFR_0_3 <- 
    getQuickstat(
      #--- put your API key in place of key_get() ---#
      key = "4C0D7DCA-D6F6-30F7-84A2-757322710936",
      program = "CENSUS",
      sector = "DEMOGRAPHICS",
      group = "PRODUCERS", 
      commodity = "PRODUCERS", 
      category = "PRODUCERS", 
      data_item = "PRODUCERS, YEARS ON PRESENT OPERATION, LT 3 YEARS - NUMBER OF PRODUCERS", 
      geographic_level = "COUNTY", 
      year = "2022" 
    )  %>% 
    # Create the new fips column by concatenating state_fips_code and county_code
    mutate(fips = paste0(state_fips_code, county_code)) %>% 
    
    rename(bfr_0_3 = Value) %>% 
    
    dplyr::select(
      fips, bfr_0_3
    )
) 





# PRODUCERS, AGE 65 TO 74 - NUMBER OF PRODUCERS 

(
  QS_BFR_65_74 <- 
    getQuickstat(
      #--- put your API key in place of key_get() ---#
      key = "4C0D7DCA-D6F6-30F7-84A2-757322710936",
      program = "CENSUS",
      sector = "DEMOGRAPHICS",
      group = "PRODUCERS", 
      commodity = "PRODUCERS", 
      category = "PRODUCERS", 
      data_item = "PRODUCERS, AGE 65 TO 74 - NUMBER OF PRODUCERS", 
      geographic_level = "COUNTY",
      year = "2022"
    )  %>% 
    # Create the new fips column by concatenating state_fips_code and county_code
    mutate(fips = paste0(state_fips_code, county_code)) %>% 
    
    rename(bfr_65_74 = Value) %>% 
    
    dplyr::select(
      fips, bfr_65_74
    )
) 




# PRODUCERS, AGE GE 75 - NUMBER OF PRODUCERS 

(
  QS_BFR_GE_75 <- 
    getQuickstat(
      #--- put your API key in place of key_get() ---#
      key = "4C0D7DCA-D6F6-30F7-84A2-757322710936",
      program = "CENSUS",
      sector = "DEMOGRAPHICS",
      group = "PRODUCERS", 
      commodity = "PRODUCERS", 
      category = "PRODUCERS", 
      data_item = "PRODUCERS, AGE GE 75 - NUMBER OF PRODUCERS", 
      geographic_level = "COUNTY",
      year = "2022"
    )  %>% 
    # Create the new fips column by concatenating state_fips_code and county_code
    mutate(fips = paste0(state_fips_code, county_code)) %>% 
    
    rename(bfr_ge_75 = Value) %>% 
    
    dplyr::select(
      fips, bfr_ge_75
    ) 
) 






# PRODUCERS, AGE LT 35 - NUMBER OF PRODUCERS 

(
  QS_BFR_LT_35 <- 
    getQuickstat(
      #--- put your API key in place of key_get() ---#
      key = "4C0D7DCA-D6F6-30F7-84A2-757322710936",
      program = "CENSUS",
      sector = "DEMOGRAPHICS",
      group = "PRODUCERS", 
      commodity = "PRODUCERS", 
      category = "PRODUCERS", 
      data_item = "PRODUCERS, AGE LT 35 - NUMBER OF PRODUCERS", 
      geographic_level = "COUNTY",
      #state = "ALABAMA",
      year = "2022",
      #geometry = TRUE
    )  %>% 
    # Create the new fips column by concatenating state_fips_code and county_code
    mutate(fips = paste0(state_fips_code, county_code)) %>% 
    
    rename(bfr_lt_35 = Value) %>% 
    
    dplyr::select(
      fips, bfr_lt_35
    ) 
) 




# PRODUCERS, FEMALE - NUMBER OF OPERATIONS 

(
  QS_BFR_FEMALE <- 
    getQuickstat(
      #--- put your API key in place of key_get() ---#
      key = "4C0D7DCA-D6F6-30F7-84A2-757322710936",
      program = "CENSUS",
      sector = "DEMOGRAPHICS",
      group = "PRODUCERS", 
      commodity = "PRODUCERS", 
      category = "PRODUCERS", 
      data_item = "PRODUCERS, (ALL), FEMALE - NUMBER OF PRODUCERS", 
      geographic_level = "COUNTY", 
      year = "2022", 
    )  %>% 
    # Create the new fips column by concatenating state_fips_code and county_code
    mutate(fips = paste0(state_fips_code, county_code)) %>% 
    
    rename(bfr_female = Value) %>% 
    
    dplyr::select(
      fips, bfr_female
    ) 
) 





# FARM OPERATIONS - AREA OPERATED, MEASURED IN ACRES / OPERATION 


(
  QS_AREA_OP <- 
    getQuickstat(
      #--- put your API key in place of key_get() ---#
      key = "4C0D7DCA-D6F6-30F7-84A2-757322710936",
      program = "CENSUS",
      sector = "ECONOMICS",
      #group = "FARMS & LAND & ASSETS", 
      commodity = "FARM OPERATIONS", 
      category = "AREA OPERATED", 
      data_item = "FARM OPERATIONS - AREA OPERATED, MEASURED IN ACRES / OPERATION", 
      geographic_level = "COUNTY",
      year = "2022", 
    )  %>% 
    # Create the new fips column by concatenating state_fips_code and county_code
    mutate(fips = paste0(state_fips_code, county_code)) %>% 
    
    rename(area_per_op = Value) %>% 
    
    dplyr::select(
      fips, area_per_op
    ) 
) 





# FARM OPERATIONS - NUMBER OF OPERATIONS 

(
  QS_NUM_OP <- 
    getQuickstat(
      #--- put your API key in place of key_get() ---#
      key = "4C0D7DCA-D6F6-30F7-84A2-757322710936", 
      program = "CENSUS", 
      sector = "ECONOMICS", 
      #group = "FARMS & LAND & ASSETS", 
      commodity = "FARM OPERATIONS", 
      category = "OPERATIONS", 
      data_item = "FARM OPERATIONS - NUMBER OF OPERATIONS", 
      domain = "TOTAL", 
      geographic_level = "COUNTY",
      year = "2022",
    )  %>% 
    # Create the new fips column by concatenating state_fips_code and county_code
    mutate(fips = paste0(state_fips_code, county_code)) %>% 
    
    rename(num_op_total_county = Value) %>% 
    
    dplyr::select(
      fips, num_op_total_county
    ) 
) 




# COMMODITY TOTALS - SALES, MEASURED IN $ / OPERATION 

(
  QS_SALES <- 
    getQuickstat(
      #--- put your API key in place of key_get() ---#
      key = "4C0D7DCA-D6F6-30F7-84A2-757322710936", 
      program = "CENSUS", 
      sector = "ECONOMICS", 
      group = "INCOME", 
      commodity = "COMMODITY TOTALS", 
      category = "SALES", 
      data_item = "COMMODITY TOTALS - SALES, MEASURED IN $ / OPERATION", 
      geographic_level = "COUNTY", 
      year = "2022", 
    )  %>% 
    # Create the new fips column by concatenating state_fips_code and county_code
    mutate(fips = paste0(state_fips_code, county_code)) %>% 
    
    rename(sales_per_op = Value) %>% 
    
    dplyr::select(
      fips, sales_per_op
    ) 
) 





# INCOME, NET CASH FARM, OF OPERATIONS - NET INCOME, MEASURED IN $ / OPERATION 

(
  QS_NETINCOME <- 
    getQuickstat(
      #--- put your API key in place of key_get() ---#
      key = "4C0D7DCA-D6F6-30F7-84A2-757322710936", 
      program = "CENSUS", 
      sector = "ECONOMICS", 
      group = "INCOME", 
      commodity = "INCOME, NET CASH FARM", 
      category = "NET INCOME", 
      data_item = "INCOME, NET CASH FARM, OF OPERATIONS - NET INCOME, MEASURED IN $ / OPERATION", 
      geographic_level = "COUNTY", 
      year = "2022", 
    )  %>% 
    # Create the new fips column by concatenating state_fips_code and county_code
    mutate(fips = paste0(state_fips_code, county_code)) %>% 
    
    rename(netincome_per_op = Value) %>% 
    
    dplyr::select(
      fips, netincome_per_op
    ) 
) 




# INCOME, FARM-RELATED, CROP & ANIMAL INSURANCE PAYMENTS - RECEIPTS, MEASURED IN $ 

(
  QS_IMDEMNITY <- 
    getQuickstat(
      #--- put your API key in place of key_get() ---#
      key = "4C0D7DCA-D6F6-30F7-84A2-757322710936", 
      program = "CENSUS", 
      sector = "ECONOMICS", 
      group = "INCOME", 
      commodity = "INCOME, FARM-RELATED", 
      category = "RECEIPTS", 
      data_item = "INCOME, FARM-RELATED, CROP & ANIMAL INSURANCE PAYMENTS - RECEIPTS, MEASURED IN $", 
      geographic_level = "COUNTY", 
      year = "2022", 
    )  %>% 
    # Create the new fips column by concatenating state_fips_code and county_code
    mutate(fips = paste0(state_fips_code, county_code)) %>% 
    
    rename(indemnity_total_county = Value) %>% 
    
    dplyr::select(
      fips, indemnity_total_county
    ) 
) 




# GOVT PROGRAMS, FEDERAL - RECEIPTS, MEASURED IN $ / OPERATION 

(
  QS_FEDGOVT <- 
    getQuickstat(
      #--- put your API key in place of key_get() ---#
      key = "4C0D7DCA-D6F6-30F7-84A2-757322710936", 
      program = "CENSUS", 
      sector = "ECONOMICS", 
      group = "INCOME", 
      commodity = "GOVT PROGRAMS", 
      category = "RECEIPTS", 
      data_item = "GOVT PROGRAMS, FEDERAL - RECEIPTS, MEASURED IN $ / OPERATION", 
      geographic_level = "COUNTY", 
      year = "2022", 
    )  %>% 
    # Create the new fips column by concatenating state_fips_code and county_code
    mutate(fips = paste0(state_fips_code, county_code)) %>% 
    
    rename(fedgovtpay_per_op = Value) %>% 
    
    dplyr::select(
      fips, fedgovtpay_per_op
    ) 
) 








# INCOME, FARM-RELATED, GOVT PROGRAMS, STATE & LOCAL - RECEIPTS, MEASURED IN $ / OPERATION 

(
  QS_STATEGOVT <- 
    getQuickstat(
      #--- put your API key in place of key_get() ---#
      key = "4C0D7DCA-D6F6-30F7-84A2-757322710936", 
      program = "CENSUS", 
      sector = "ECONOMICS", 
      group = "INCOME", 
      commodity = "INCOME, FARM-RELATED", 
      category = "RECEIPTS", 
      data_item = "INCOME, FARM-RELATED, GOVT PROGRAMS, STATE & LOCAL - RECEIPTS, MEASURED IN $ / OPERATION", 
      geographic_level = "COUNTY", 
      year = "2022", 
    )  %>% 
    # Create the new fips column by concatenating state_fips_code and county_code
    mutate(fips = paste0(state_fips_code, county_code)) %>% 
    
    rename(stategovtpay_per_op = Value) %>% 
    
    dplyr::select(
      fips, stategovtpay_per_op
    ) 
) 




# AG LAND, CROPLAND - ACRES 

(
  QS_CROPLAND <- 
    getQuickstat(
      #--- put your API key in place of key_get() ---#
      key = "4C0D7DCA-D6F6-30F7-84A2-757322710936", 
      program = "CENSUS", 
      sector = "ECONOMICS", 
      #group = "FARMS & LAND & ASSETS", 
      commodity = "AG LAND", 
      category = "AREA", 
      data_item = "AG LAND, CROPLAND - ACRES", 
      geographic_level = "COUNTY", 
      year = "2022", 
    )  %>% 
    # Create the new fips column by concatenating state_fips_code and county_code
    mutate(fips = paste0(state_fips_code, county_code)) %>% 
    
    rename(cropland_total_county = Value) %>% 
    
    dplyr::select(
      fips, cropland_total_county
    ) 
) 




# AG LAND, INCL BUILDINGS - ASSET VALUE, MEASURED IN $ / OPERATION 

(
  QS_LANDASSET <- 
    getQuickstat(
      #--- put your API key in place of key_get() ---#
      key = "4C0D7DCA-D6F6-30F7-84A2-757322710936", 
      program = "CENSUS", 
      sector = "ECONOMICS", 
      #group = "FARMS & LAND & ASSETS", 
      commodity = "AG LAND", 
      category = "ASSET VALUE", 
      data_item = "AG LAND, INCL BUILDINGS - ASSET VALUE, MEASURED IN $ / OPERATION", 
      geographic_level = "COUNTY", 
      year = "2022", 
    )  %>% 
    # Create the new fips column by concatenating state_fips_code and county_code
    mutate(fips = paste0(state_fips_code, county_code)) %>% 
    
    rename(landasset_per_op = Value) %>% 
    
    dplyr::select(
      fips, landasset_per_op
    ) 
) 





# AG LAND, INCL BUILDINGS - ASSET VALUE, MEASURED IN $ / OPERATION 

(
  QS_MACHINEASSET <- 
    getQuickstat(
      #--- put your API key in place of key_get() ---#
      key = "4C0D7DCA-D6F6-30F7-84A2-757322710936", 
      program = "CENSUS", 
      sector = "ECONOMICS", 
      #group = "FARMS & LAND & ASSETS", 
      commodity = "MACHINERY TOTALS", 
      category = "ASSET VALUE", 
      data_item = "MACHINERY TOTALS - ASSET VALUE, MEASURED IN $ / OPERATION", 
      geographic_level = "COUNTY", 
      year = "2022", 
    )  %>% 
    # Create the new fips column by concatenating state_fips_code and county_code
    mutate(fips = paste0(state_fips_code, county_code)) %>% 
    
    rename(machineasset_per_op = Value) %>% 
    
    dplyr::select(
      fips, machineasset_per_op
    ) 
) 





# PRODUCERS, DAYS WORKED OFF OPERATION, GE 200 DAYS - NUMBER OF PRODUCERS 

(
  QS_OFFFARMDAYS <- 
    getQuickstat(
      #--- put your API key in place of key_get() ---#
      key = "4C0D7DCA-D6F6-30F7-84A2-757322710936", 
      program = "CENSUS", 
      sector = "DEMOGRAPHICS", 
      group = "PRODUCERS", 
      commodity = "PRODUCERS", 
      category = "PRODUCERS", 
      data_item = "PRODUCERS, DAYS WORKED OFF OPERATION, GE 200 DAYS - NUMBER OF PRODUCERS", 
      geographic_level = "COUNTY", 
      year = "2022", 
    )  %>% 
    # Create the new fips column by concatenating state_fips_code and county_code
    mutate(fips = paste0(state_fips_code, county_code)) %>% 
    
    rename(days_off_farm_200 = Value) %>% 
    
    dplyr::select(
      fips, days_off_farm_200
    ) 
) 





# List of dataframes
data_list <- list(QS_AREA_OP, QS_BFR_0_3, QS_BFR_3_4, QS_BFR_5_9, QS_BFR_65_74, QS_BFR_FEMALE, 
                  QS_BFR_GE_75, QS_BFR_LT_35, QS_CROPLAND, QS_FEDGOVT, QS_IMDEMNITY, 
                  QS_NETINCOME, QS_NUM_OP, QS_SALES, QS_STATEGOVT, QS_LANDASSET, QS_MACHINEASSET, QS_OFFFARMDAYS) 

# Find the largest dataframe
largest_data <- data_list[[which.max(sapply(data_list, nrow))]]

# Initialize the merged data with the largest dataframe
merged_data <- largest_data

# Loop through the list and merge each dataframe based on 'fips'
for (data in data_list) {
  if (!identical(data, largest_data)) {  # Skip the largest dataframe itself
    merged_data <- merged_data %>%
      full_join(data, by = "fips")
  }
} 


# NOW MERGE 


data <- merge(merged_data, reis_govtpayment_sales, by = "fips", all.x=TRUE) 

# Convert three character variables to numerical
data <- data %>%
  mutate(
    animalsales_total_county = as.numeric(animalsales_total_county)*1000,
    cropsales_total_county = as.numeric(cropsales_total_county)*1000,
    govtpay_total_county = as.numeric(govtpay_total_county)*1000
  ) 


data$govt_payment <- NULL 

# Remove rows where all columns are NA and replace remaining NA values with 0
data <- data %>%
  filter(!if_all(everything(), is.na)) %>%  # Remove rows where all columns are NA
  mutate_all(~ replace(., is.na(.), 0))     # Replace remaining NA values with 0




# Calculate row-wise sum for specific columns
data$BFR <- rowSums(data[, c("bfr_5_9", "bfr_3_4", "bfr_0_3")], na.rm = TRUE) 
data$BFR_LT5 <- rowSums(data[, c("bfr_3_4", "bfr_0_3")], na.rm=TRUE) 
mean(data$bfr_0_3, na.rm=TRUE) 

data$GT65 <- rowSums(data[, c("bfr_65_74", "bfr_ge_75")], na.rm=TRUE)
mean(data$bfr_lt_35, na.rm=TRUE)
mean(data$bfr_female, na.rm=TRUE) 
mean(data$area_per_op, na.rm=TRUE) 
mean(data$num_op_total_county, na.rm=TRUE) 

data$sales_total_county_reis <- rowSums(data[, c("animalsales_total_county", "cropsales_total_county")], na.rm = TRUE) 
data$sales_total_county_qs <- data$num_op_total_county*data$sales_per_op

mean(data$sales_total_county_reis, na.rm=TRUE) 
mean(data$sales_total_county_qs, na.rm=TRUE) 

data$productivity_reis <- data$sales_total_county_reis/(data$landasset_per_op*data$num_op_total_county) 
data$productivity_qs <- data$sales_total_county_qs/(data$landasset_per_op*data$num_op_total_county) 

mean(data$days_off_farm_200, na.rm=TRUE) 

mean(data$num_op_total_county, na.rm=TRUE) 

mean(data$indemnity_total_county, na.rm=TRUE)
data$indemnity_per_acre <- data$indemnity_total_county/data$cropland_total_county 

data$govtpay_per_op_qs <- rowSums(data[, c("fedgovtpay_per_op", "stategovtpay_per_op")], na.rm=TRUE) 
data$govtpay_per_op_reis <- data$govtpay_total_county/data$num_op_total_county

data_2022 <- merge(data, final_data, by="fips") 

data_2022$nonfarm_income_per_op <- as.numeric(data_2022$nonfarm_income)/data_2022$num_op_total_county 

data_2022$annual_tempsq <- data_2022$annual_temp^2 
data_2022$annual_precipsq <- data_2022$annual_precip^2 

data_2022 <- data_2022 %>%
  filter_all(all_vars(!is.infinite(.))) 

data_2022 <- data_2022 %>%
  filter_all(all_vars(!is.nan(.))) 



# Read the data
BFR <- read_dta("BFR.dta") 

# Inspect the data
head(BFR)
# summary(BFR) 

BFR$Govtpayments_per_op <- BFR$Govtpayments/BFR$NumofFarmOperations 
BFR$pNonfarmProp_new <- BFR$NonFarmProprietor/BFR$workingpopulation 

mean(BFR$pNonfarmProp_new[is.finite(BFR$pNonfarmProp_new)], na.rm = TRUE) 
BFR$bankbranch <- BFR$bankpersqmile*BFR$landsqmile 


# Calculate groupwise means
BFR_means <- BFR %>%
  group_by(Year) %>%
  summarise(
    BFRprin_mean = mean(BFRprin, na.rm = TRUE),
    BFRexp1t5_mean = mean(BFRexplt5, na.rm = TRUE),
    BFR_exp1t3_mean = mean(BFR_explt3, na.rm = TRUE),
    operatorsagege65_mean = mean(operatorsagege65, na.rm = TRUE),
    young_mean = mean(young, na.rm = TRUE),
    Women_producers_mean = mean(Women_producers, na.rm = TRUE), 
    
    avgfarmsize_mean = mean(avgfarmsize, na.rm=TRUE), 
    NumofFarmOperations_mean = mean(NumofFarmOperations, na.rm=TRUE), 
    
    totalsales_mean = mean(totalsales, na.rm=TRUE), 
    Average_TVP1_mean = mean(Average_TVP1, na.rm=TRUE), 
    
    assetsA_mean = mean(assetsA, na.rm=TRUE), 
    Assetvalue1_mean = mean(Assetvalue1, na.rm=TRUE), 
    
    avgfarmproductivity_mean = mean(avgfarmproductivity, na.rm=TRUE), 
    
    offfarm200_mean = mean(offfarm200, na.rm=TRUE), 
    
    Govtpayments_mean = mean(Govtpayments, na.rm=TRUE), 
    Indem_acre_mean = mean(Indem_acre, na.rm=TRUE), 
    CropIndemnityPayment_mean = mean(CropIndemnityPayment, na.rm=TRUE), 
    
    croplandinacres_mean = mean(croplandinacres, na.rm=TRUE), 
    FarmsAcre1_mean = mean(FarmsAcre1, na.rm=TRUE)
    
  ) 







# Calculate groupwise means
BFR_means <- BFR %>%
  group_by(Year) %>%
  summarise(
    BFR = mean(BFRprin, na.rm = TRUE),
    BFR_1to5 = mean(BFRexplt5, na.rm = TRUE), 
    BFR_1to3 = mean(BFR_explt3, na.rm = TRUE),
    Operator_above65 = mean(operatorsagege65, na.rm = TRUE),
    Operator_under35 = mean(young, na.rm = TRUE),
    Operator_female = mean(Women_producers, na.rm = TRUE), 
    
    AvgFarmSize = mean(avgfarmsize, na.rm=TRUE), 
    Productivity = mean(avgfarmproductivity, na.rm=TRUE), 
    FarmPrice = mean(landprice, na.rm=TRUE), 
    DaysOffFarm_above200 = mean(offfarm200, na.rm=TRUE), 
    NumFarmOps = mean(NumofFarmOperations, na.rm=TRUE), 
    NetCashIncome_per_Op = mean(fincomeA, na.rm=TRUE), #farmincome_perfarm 
    NonFarmIncome_per_Op = mean(NonFarmEarning_perfarm, na.rm=TRUE), 
    Indemnity_per_Acre = mean(Indem_acre, na.rm=TRUE), 
    GovtPay_per_Op = mean(Govtpayments_per_op, na.rm=TRUE), 
    
    Bank_per_SQmile = sum(bankbranch, na.rm=TRUE)/sum(landsqmile, na.rm=TRUE), 
    FCS_per_SQmile = mean(FCSpersqmile, na.rm=TRUE), 
    
    AgShare = mean(AgGDPratio, na.rm=TRUE), 
    Unemployment = mean(Unemploymentrate, na.rm=TRUE), 
    NonFarmProp = mean(pNonfarmProp_new[is.finite(pNonfarmProp_new)], na.rm=TRUE), 
    Cropland = mean(croplandinacres, na.rm=TRUE), 
    Metro = mean(metro, na.rm=TRUE), 
    Disaster = mean(pddv, na.rm=TRUE), 
    
    Temperature = mean(annualmeant, na.rm=TRUE), 
    Temperature_sq = mean(sqannualmeant, na.rm=TRUE), 
    Precipitation = mean(annualmeanpcpn, na.rm=TRUE), 
    Precipitation_sq = mean(sqannualmeanpcpn, na.rm=TRUE) 
    
  ) 






# Calculate groupwise means
data2022_means <- data_2022 %>% 
  summarise( 
    BFR = mean(BFR, na.rm = TRUE),
    BFR_1to5 = mean(BFR_LT5, na.rm = TRUE), 
    BFR_1to3 = mean(bfr_0_3, na.rm = TRUE),
    Operator_above65 = mean(GT65, na.rm = TRUE),
    Operator_under35 = mean(bfr_lt_35, na.rm = TRUE),
    Operator_female = mean(bfr_female, na.rm = TRUE), 
    
    AvgFarmSize = mean(area_per_op, na.rm=TRUE), 
    Productivity = mean(productivity_qs, na.rm=TRUE), 
    FarmPrice = mean(farm_price, na.rm=TRUE), 
    DaysOffFarm_above200 = mean(days_off_farm_200, na.rm=TRUE), 
    NumFarmOps = mean(num_op_total_county, na.rm=TRUE), 
    NetCashIncome_per_Op = mean(netincome_per_op, na.rm=TRUE), 
    NonFarmIncome_per_Op = mean(nonfarm_income_per_op, na.rm=TRUE), 
    Indemnity_per_Acre = mean(indemnity_per_acre, na.rm=TRUE), 
    GovtPay_per_Op = mean(govtpay_per_op_reis, na.rm=TRUE), 
    
    Bank_per_SQmile = mean(bank_density, na.rm=TRUE), 
    FCS_per_SQmile = 0, 
    
    AgShare = mean(ag_to_gdp, na.rm=TRUE), 
    Unemployment = mean(unemp_rate, na.rm=TRUE), 
    NonFarmProp = mean(nonfarm_prop, na.rm=TRUE), 
    Cropland = mean(cropland_total_county, na.rm=TRUE), 
    Metro = mean(metro, na.rm=TRUE), 
    Disaster = mean(incidence, na.rm=TRUE), 
    
    Temperature = mean(annual_temp, na.rm=TRUE), 
    Temperature_sq = mean(annual_tempsq, na.rm=TRUE), 
    Precipitation = mean(annual_precip, na.rm=TRUE), 
    Precipitation_sq = mean(annual_precipsq, na.rm=TRUE) 
    
  ) 


# Add the new column as the first column 
data2022_means <- data2022_means %>%
  mutate(Year = as.numeric(2022)) %>%
  select(Year, everything()) 

BFR_means$Year <- c(1997, 2002, 2007, 2012, 2017)

# Add the first row from df2 to df1 
data_mean <- rbind(BFR_means, data2022_means) 







V22 


payment <- read.csv("C:/Users/syedm/Desktop/BFR Spatial/Indemnity.txt", header = FALSE, sep = "|") 

# Assuming your dataset is named unemp
payment <- payment %>%
  # Ensure State_FIPS and County_FIPS are character strings
  mutate(State_FIPS = as.character(V2),
         County_FIPS = as.character(V4)) %>%
  
  # Pad State_FIPS to 2 digits
  mutate(State_FIPS = str_pad(State_FIPS, width = 2, side = "left", pad = "0")) %>%
  
  # Pad County_FIPS to 3 digits
  mutate(County_FIPS = str_pad(County_FIPS, width = 3, side = "left", pad = "0")) %>%
  
  # Create the new fips column by concatenating State_FIPS and County_FIPS
  mutate(fips = paste0(State_FIPS, County_FIPS)) %>%
  
  # Select only the fips and Unemp_rate columns
  select(fips, V29, V22) 


# Group by fips and calculate the sum of each group
payment <- payment %>%
  group_by(fips) %>%
  summarize(total_sum = sum(V29)) 



# Calculate groupwise sds
BFR_sds <- BFR %>%
  group_by(Year) %>%
  summarise(
    BFR = sd(BFRprin, na.rm = TRUE),
    BFR_1to5 = sd(BFRexplt5, na.rm = TRUE), 
    BFR_1to3 = sd(BFR_explt3, na.rm = TRUE),
    Operator_above65 = sd(operatorsagege65, na.rm = TRUE),
    Operator_under35 = sd(young, na.rm = TRUE),
    Operator_female = sd(Women_producers, na.rm = TRUE), 
    
    AvgFarmSize = sd(avgfarmsize, na.rm=TRUE), 
    Productivity = sd(avgfarmproductivity, na.rm=TRUE), 
    FarmPrice = sd(landprice, na.rm=TRUE), 
    DaysOffFarm_above200 = sd(offfarm200, na.rm=TRUE), 
    NumFarmOps = sd(NumofFarmOperations, na.rm=TRUE), 
    NetCashIncome_per_Op = sd(fincomeA, na.rm=TRUE), #farmincome_perfarm 
    NonFarmIncome_per_Op = sd(NonFarmEarning_perfarm, na.rm=TRUE), 
    Indemnity_per_Acre = sd(Indem_acre, na.rm=TRUE), 
    GovtPay_per_Op = sd(Govtpayments_per_op, na.rm=TRUE), 
    
    Bank_per_SQmile = sd(bankpersqmile, na.rm=TRUE), #sum(bankbranch, na.rm=TRUE)/sum(landsqmile, na.rm=TRUE), 
    FCS_per_SQmile = sd(FCSpersqmile, na.rm=TRUE), 
    
    AgShare = sd(AgGDPratio, na.rm=TRUE), 
    Unemployment = sd(Unemploymentrate, na.rm=TRUE), 
    NonFarmProp = sd(pNonfarmProp_new[is.finite(pNonfarmProp_new)], na.rm=TRUE), 
    Cropland = sd(croplandinacres, na.rm=TRUE), 
    Metro = sd(metro, na.rm=TRUE), 
    Disaster = sd(pddv, na.rm=TRUE), 
    
    Temperature = sd(annualmeant, na.rm=TRUE), 
    Temperature_sq = sd(sqannualmeant, na.rm=TRUE), 
    Precipitation = sd(annualmeanpcpn, na.rm=TRUE), 
    Precipitation_sq = sd(sqannualmeanpcpn, na.rm=TRUE) 
    
  ) 






# Calculate groupwise sds
data2022_sds <- data_2022 %>% 
  summarise( 
    BFR = sd(BFR, na.rm = TRUE),
    BFR_1to5 = sd(BFR_LT5, na.rm = TRUE), 
    BFR_1to3 = sd(bfr_0_3, na.rm = TRUE),
    Operator_above65 = sd(GT65, na.rm = TRUE),
    Operator_under35 = sd(bfr_lt_35, na.rm = TRUE),
    Operator_female = sd(bfr_female, na.rm = TRUE), 
    
    AvgFarmSize = sd(area_per_op, na.rm=TRUE), 
    Productivity = sd(productivity_qs, na.rm=TRUE), 
    FarmPrice = sd(farm_price, na.rm=TRUE), 
    DaysOffFarm_above200 = sd(days_off_farm_200, na.rm=TRUE), 
    NumFarmOps = sd(num_op_total_county, na.rm=TRUE), 
    NetCashIncome_per_Op = sd(netincome_per_op, na.rm=TRUE), 
    NonFarmIncome_per_Op = sd(nonfarm_income_per_op, na.rm=TRUE), 
    Indemnity_per_Acre = sd(indemnity_per_acre, na.rm=TRUE), 
    GovtPay_per_Op = sd(govtpay_per_op_reis, na.rm=TRUE), 
    
    Bank_per_SQmile = sd(bank_density, na.rm=TRUE), 
    FCS_per_SQmile = 0, 
    
    AgShare = sd(ag_to_gdp, na.rm=TRUE), 
    Unemployment = sd(unemp_rate, na.rm=TRUE), 
    NonFarmProp = sd(nonfarm_prop, na.rm=TRUE), 
    Cropland = sd(cropland_total_county, na.rm=TRUE), 
    Metro = sd(metro, na.rm=TRUE), 
    Disaster = sd(incidence, na.rm=TRUE), 
    
    Temperature = sd(annual_temp, na.rm=TRUE), 
    Temperature_sq = sd(annual_tempsq, na.rm=TRUE), 
    Precipitation = sd(annual_precip, na.rm=TRUE), 
    Precipitation_sq = sd(annual_precipsq, na.rm=TRUE) 
    
  ) 


# Add the new column as the first column 
data2022_sds <- data2022_sds %>%
  mutate(Year = as.numeric(2022)) %>%
  select(Year, everything()) 

BFR_sds$Year <- c(1997, 2002, 2007, 2012, 2017)

# Add the first row from df2 to df1 
data_sd <- rbind(BFR_sds, data2022_sds) 


